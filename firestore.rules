/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a collaborative access model for lab experiments,
 *              where access is granted to scientists listed in the `scientistIds` array
 *              within each experiment document. The waitlist is publicly readable.
 *
 * @dataStructure
 *  /experiments/{experimentId} - Stores experiment data. Contains a `scientistIds` array
 *                                  for managing scientist access to the experiment.
 *  /scientists/{scientistId} - Stores scientist data.
 *  /sops/{sopId} - Stores Standard Operating Procedures.
 *  /regulatoryReports/{regulatoryReportId} - Stores regulatory reports.
 *  /waitListEntries/{waitListEntryId} - Stores wait list entries.
 *
 * @keySecurityDecisions
 *  - Access to experiments is controlled by the `scientistIds` array within each
 *    experiment document.  A user can read and write an experiment if their UID is
 *    present in this array.
 *  - The waitlist is publicly readable to allow easy access for marketing purposes.
 *  - Listing of scientists, SOPs, and regulatory reports is disallowed.
 *  - Experiments requires scientist id in the array.
 *
 * @denormalizationForAuthorization
 *  - The `experiments` documents denormalize access control data via the `scientistIds` array.
 *    This allows rules to check if a user has access to an experiment without requiring
 *    additional `get()` operations.
 *
 * @structuralSegregation
 *  - Different data types (experiments, scientists, SOPs, regulatory reports, waitlist entries)
 *    are stored in separate collections to simplify security rules and ensure a consistent
 *    security posture for each collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to experiments based on the `scientistIds` array.
     * @path /experiments/{experimentId}
     * @allow (get, update) if request.auth.uid is in the `scientistIds` array.
     * @deny (get, update) if request.auth.uid is not in the `scientistIds` array.
     * @principle Enforces collaborative access to experiments based on the `scientistIds` array.
     */
    match /experiments/{experimentId} {
      // Helper function to check if the user is a scientist listed in the experiment's scientistIds array
      function isScientist() {
        return request.auth != null && request.auth.uid in resource.data.scientistIds;
      }

      // Helper function to check if the user is a scientist listed in the experiment's scientistIds array for an existing document.
      function isExistingScientist() {
        return request.auth != null && request.auth.uid in resource.data.scientistIds;
      }

      // Grants read access (get) to scientists.
      allow get: if isScientist();

      // Grants list access to scientists with valid id.
      allow list: if request.auth != null;

      // Allows create scientist if it is in the scientistIds array.
      allow create: if request.auth != null && request.resource.data.scientistIds is list && request.auth.uid in request.resource.data.scientistIds;

      // Allows update existing documents if it is an existing scientist id.
      allow update: if isExistingScientist();

      // Allows delete existing documents if it is an existing scientist id.
      allow delete: if isExistingScientist();
    }

    /**
     * @description Grants access to scientists.
     * @path /scientists/{scientistId}
     * @allow (create) if request.auth.uid matches the scientistId.
     * @deny (create) if request.auth.uid does not match the scientistId.
     * @principle Enforces user-owned data for scientists.
     */
    match /scientists/{scientistId} {
      // Helper function to check if the user is the owner of the scientist document
      function isOwner() {
        return request.auth != null && request.auth.uid == scientistId;
      }

      // Helper function to check if the user is the existing owner of the scientist document
      function isExistingOwner() {
        return request.auth != null && request.auth.uid == resource.id;
      }

      // Allow reads only if is owner.
      allow get: if isOwner();

      // Deny listing scientists.
      allow list: if false;

      // Allow creation if the user ID matches the document ID.
      allow create: if isOwner();

      // Allow update if existing scientist id exists.
      allow update: if isExistingOwner();

      // Allow delete if existing scientist id exists.
      allow delete: if isExistingOwner();
    }

    /**
     * @description Denies all access to SOPs.
     * @path /sops/{sopId}
     * @allow (none) No one can access SOPs.
     * @principle Enforces a closed data model for SOPs.
     */
    match /sops/{sopId} {
      //Deny reads
      allow get: if false;

      //Deny listing
      allow list: if false;

      //Deny creation
      allow create: if false;

      //Deny update
      allow update: if false;

      //Deny deletion
      allow delete: if false;
    }

    /**
     * @description Denies all access to regulatory reports.
     * @path /regulatoryReports/{regulatoryReportId}
     * @allow (none) No one can access regulatory reports.
     * @principle Enforces a closed data model for regulatory reports.
     */
    match /regulatoryReports/{regulatoryReportId} {
      //Deny reads
      allow get: if false;

      //Deny listing
      allow list: if false;

      //Deny creation
      allow create: if false;

      //Deny update
      allow update: if false;

      //Deny deletion
      allow delete: if false;
    }

    /**
     * @description Grants public read access to waitlist entries and allows anyone to create an entry.
     * @path /waitListEntries/{waitListEntryId}
     * @allow (get, list) Everyone can read the waitlist.
     * @allow (create) Anyone can add themselves to the waitlist.
     * @deny (update, delete) No one can modify or delete waitlist entries.
     * @principle Allows open access to the waitlist for marketing purposes.
     */
    match /waitListEntries/{waitListEntryId} {
      //Allow reads
      allow get: if true;

      //Allow listing
      allow list: if true;

      //Allow creation
      allow create: if true;

      //Deny update
      allow update: if false;

      //Deny deletion
      allow delete: if false;
    }
  }
}